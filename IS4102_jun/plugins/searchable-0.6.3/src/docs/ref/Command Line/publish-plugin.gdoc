h1. publish-plugin

h2. Purpose

Publishes a Grails plugin to a plugin repository and notifies an associated plugin portal of the release.

h2. Options

{code}
grails publish-plugin [--dryRun] [--snapshot] [--repository=repoId] [--protocol=protocol] [--portal=portal] [--pingOnly]
{code}

* @dryRun@ will simply print out what files will be deployed. It won't actually perform the deployment, so it's a good way to see whether the command will do what you expect.
* @snapshot@ forces the command to treat the plugin as a snapshot version. In other words, it will not be marked as the latest release. This currently only affects deployments to Subversion repositories. By default, plugins are treated as release versions unless their version number has a '-SNAPSHOT' suffix.
* @repository@ specifies which Subversion or Maven-compatible repository the plugin should be deployed to. A remote repository must first be defined with that ID in BuildConfig.groovy.
* @protocol@ specifies the protocol to use when deploying the plugin to a Maven-compatible repository. Can be one of 'http', 'scp', 'scpexe', 'ftp', or 'webdav'. The default is 'http'.
* @portal@ specifies the ID of the portal to notify. For this to work, a portal must be configured for that ID in BuildConfig.groovy.
* @pingOnly@ forces the command to only notify the configured portal - the plugin is not published to a repository.

h2. Examples

Publish to the Grails Central Plugin Repository and notify the grails.org plugin portal of the release:
{code}
grails publish-plugin
{code}

Publish to the repository 'myRepo' - whatever portal (if any) is configured for that repository will be notified by the command:
{code}
grails publish-plugin --repository=myRepo
{code}

Publish to the custom repository 'acme', notify the plugin portal declared with the ID 'comp', and force this release to be treated as a snapshot:
{code}
grails publish-plugin --repository=acme --portal=comp --snapshot
{code}

h2. Description

In order for Grails to use plugins declaratively via the dependency DSL, they must be published to a repository. This command allows you to publish to both Maven-compatible and old-style Subversion repositories while also optionally notifying a plugin portal (like the one on grails.org) of the plugin releases.
